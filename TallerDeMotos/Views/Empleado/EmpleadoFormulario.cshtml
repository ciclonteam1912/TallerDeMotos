@model TallerDeMotos.ViewModels.EmpleadoViewModel
@{
    ViewBag.Title = Model.Titulo;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Html.Partial("_MenuVertical")
<div class="col-lg-9 col-md-9 col-xs-11" id="contenido">
    <h2>@Model.Titulo</h2>

    @using (Html.BeginForm("GuardarEmpleado", "Empleado"))
    {
        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h3 class="modal-title">Agregar Ciudad</h3>
                    </div>
                    <div class="modal-body">
                        <div id="example">
                            <div id="grid"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">@Model.Titulo</div>
            <div class="panel-body">
                <div class="row">
                    <h4>@Html.ValidationSummary(true, "¡Por favor solucione los siguientes errores!")</h4>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Nombre)
                            @Html.TextBoxFor(m => m.Nombre, new { @class = "form-control", placeholder = "Nombre del Empleado...", maxlength = 50, autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Nombre)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Apellido)
                            @Html.TextBoxFor(m => m.Apellido, new { @class = "form-control", placeholder = "Cédula...", maxlength = 50, autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Apellido)
                        </div>                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Cedula)
                            @Html.TextBoxFor(m => m.Cedula, new { @class = "form-control", placeholder = "Cédula...", maxlength = 50, autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Cedula)
                        </div>                        
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CargoId)
                            @Html.DropDownListFor(m => m.CargoId, new SelectList(Model.Cargos, "Id", "Nombre"), "Seleccionar Cargo", new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.CargoId)
                        </div>                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Direccion)
                            @Html.TextAreaFor(m => m.Direccion, new { @class = "form-control", placeholder = "Dirección...", maxlength = 255, autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Direccion)
                        </div>                        
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CorreoElectronico)
                            @Html.TextBoxFor(m => m.CorreoElectronico, new { @class = "form-control", placeholder = "Correo Electrónico...", maxlength = 50, autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.CorreoElectronico)
                        </div>                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Telefono)
                            @Html.TextBoxFor(m => m.Telefono, new { @class = "form-control", placeholder = "Número de Teléfono...", maxlength = 50, autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Telefono)
                        </div>                       
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Salario)
                            @Html.TextBoxFor(m => m.Salario, new { @class = "form-control", placeholder = "Salario...", autocomplete = "off", type = "number", min = "0", max = "5000000", oninput = "maxLengthCheck(this)", onkeydown = "javascript: return event.keyCode == 69 ? false : true" })
                            @Html.ValidationMessageFor(m => m.Salario)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.FechaDeNacimiento, new { id = "labelFecha" })
                            @Html.TextBoxFor(m => m.FechaDeNacimiento, new { @class = "form-control", placeholder = "Fecha de Nacimiento...", onkeydown = "return false;", style = "width:74%; " })
                            @Html.ValidationMessageFor(m => m.FechaDeNacimiento)
                        </div>                        
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.HoraDeEntrada)
                            @Html.TextBoxFor(m => m.HoraDeEntrada, new { @class = "form-control", placeholder = "Horario de Entrada...", onkeydown = "return false;", style = "width:74%; " })
                            @Html.ValidationMessageFor(m => m.HoraDeEntrada)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.HoraDeSalida)
                            @Html.TextBoxFor(m => m.HoraDeSalida, new { @class = "form-control", placeholder = "Horario de Salida...", onkeydown = "return false;", style = "width:74%; " })
                            @Html.ValidationMessageFor(m => m.HoraDeSalida)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CiudadId, new { id = "labelCiudad" })
                            @Html.DropDownListFor(m => m.CiudadId, new SelectList(Model.Ciudades, "Id", "Nombre"), "Seleccionar Ciudad...", new { @class = "form-control", id = "ciudadId" })
                            <button class="btn btn-primary fa fa-plus" data-toggle="modal" data-target="#myModal"></button>
                            <div>@Html.ValidationMessageFor(m => m.CiudadId)</div>

                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.HiddenFor(m => m.Id)
                    @Html.AntiForgeryToken()
                </div>
            </div>
            <div class="panel-footer">
                <button class="btn btn-primary">Guardar</button>
            </div>
        </div>
    }
</div>

@section Scripts{
    <script>
        function maxLengthCheck(object) {
            if (object.value.length > object.max.length)
                object.value = object.value.slice(0, object.max.length);
        }

        $(document).ready(function () {
            $("#menuTaller").addClass('active');
            var id = $("#Id").val();

            $("#FechaDeNacimiento").kendoDateTimePicker({
                animation: {
                    open: {
                        effects: "zoom:in",
                        duration: 300
                    },
                    close: {
                        effects: "zoom:out",
                        duration: 300
                    }
                },
                value: id == 0 ? new Date() : $("#FechaDeNacimiento").val(),
                culture: "es-ES",
                dateInput: true
            });

            $("#HoraDeEntrada").kendoTimePicker({
                animation: {
                    open: {
                        effects: "zoom:in",
                        duration: 300
                    },
                    close: {
                        effects: "zoom:out",
                        duration: 300
                    }
                },
                culture: "es-ES",
                interval: 15,
                min: new Date(2000, 0, 1, 7, 0, 0),
                max: new Date(2000, 0, 1, 18, 0, 0), //date part is ignored
                value: id == 0 ? new Date(2000, 0, 1, 7, 0, 0) : $("#HoraDeEntrada").val()
            });

            $("#HoraDeSalida").kendoTimePicker({
                animation: {
                    open: {
                        effects: "zoom:in",
                        duration: 300
                    },
                    close: {
                        effects: "zoom:out",
                        duration: 300
                    }
                },
                culture: "es-ES",
                interval: 15,
                min: new Date(2000, 0, 1, 7, 0, 0),
                max: new Date(2000, 0, 1, 18, 0, 0), //date part is ignored
                value: id == 0 ? new Date(2000, 0, 1, 18, 0, 0) : $("#HoraDeSalida").val()
            });

            var dataSource = new kendo.data.DataSource({
                autoSync: false,
                transport: {
                    read: {
                        url: "/api/Ciudades",
                        dataType: "json"
                    },
                    update: {
                        url: "/Ciudad/EditarCiudad",
                        dataType: "json",
                        type: "post"
                    },
                    create: {
                        url: "/Ciudad/CrearCiudad",
                        dataType: "json",
                        type: "post"
                    }
                },
                pageSize: 10,
                serverPaging: false,
                serverSorting: false,
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false },
                            Nombre: { validation: { required: true } }
                        }
                    }
                }
            });

            $("#grid").kendoGrid({
                dataSource: dataSource,
                pageable: {
                    refresh: true,
                    pageSizes: true,
                    buttonCount: 5
                },
                sortable: true,
                filterable: true,
                height: 500,
                toolbar: ["create", "save", "cancel"],
                columns: [
                    { field: "Nombre", title: "Nombre", width: 120 }
                ],
                editable: true
            });
        });
    </script>
}